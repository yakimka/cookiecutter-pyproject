name: CI\CD

on:
  push:
    branches:
      - {{ cookiecutter.main_branch }}
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
  # Update docker hub retention policy
  schedule:
    - cron: "21 7 8 * *"

env:
  DOCKER_USERNAME: "{{ cookiecutter.dockerhub_username }}"
  PROJECT_NAME: "{{ cookiecutter.project_name }}"
  MAIN_PY_VERSION: "3.11"
  PIP_NO_CACHE_DIR: "off"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"
  REGISTRY: ""
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"

concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}
  cancel-in-progress: true

permissions: read-all

jobs:
  check-code:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
      - uses: actions/checkout@v3

      - run: echo "IMAGE_FULL_NAME=$(echo ${DOCKER_USERNAME}/${PROJECT_NAME})" >> $GITHUB_ENV
      - run: echo "DEV_VERSION=`(cat Dockerfile-dev; cat .github/workflow/workflow-ci.yml)|sha1sum |cut -c 1-8`" >> $GITHUB_ENV
      - run: echo "DEV_IMAGE=${IMAGE_FULL_NAME}:dev-{% raw %}${{ matrix.python-version }}{% endraw %}-${DEV_VERSION}" >> $GITHUB_ENV
      - run: echo "VERSION=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
      - run: echo "SHORT_VERSION=$(echo ${VERSION%.*})" >> $GITHUB_ENV

      - name: Prepare Docker
        env:
          DOCKERHUB_TOKEN: {% raw %}${{ secrets.DOCKERHUB_TOKEN }}{% endraw %}
        run: |
          cp .env.template .env
          echo "${DOCKERHUB_TOKEN}" | docker login "$REGISTRY" -u "$DOCKER_USERNAME" --password-stdin
          docker buildx create --use --driver=docker-container
          docker --version && docker compose --version

      - name: Load cached venv and cache
        id: cached-venv-and-cache
        uses: actions/cache@v3
        with:
          path: |
            .venv
            .cache
          key: {% raw %}py${{ matrix.python-version }}-${{ hashFiles('./poetry.lock') }}{% endraw %}

      - name: Build docker dev image
        run: |
          docker pull ${DEV_IMAGE} || (
            {% raw %}PYTHON_VERSION=${{ matrix.python-version }} docker compose build app ;{% endraw %}
            docker tag ${PROJECT_NAME}:dev ${DEV_IMAGE} ;
            docker push ${DEV_IMAGE}
          )
          docker tag ${DEV_IMAGE} ${PROJECT_NAME}:dev

      - name: Run checks
        run: docker compose run --user=$(id -u) --rm devtools ./ci.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          # token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %} # not required for public repos

      - uses: actions/upload-artifact@v3
        with:
          name: {% raw %}built-package-py${{ matrix.python-version }}{% endraw %}
          path: dist/

  release-package:
    runs-on: ubuntu-latest
    needs: [ check-code ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: {% raw %}built-package-py${{ env.MAIN_PY_VERSION }}{% endraw %}
          path: dist/

      - run: echo "IMAGE_FULL_NAME=$(echo ${DOCKER_USERNAME}/${PROJECT_NAME})" >> $GITHUB_ENV
      - run: echo "DEV_VERSION=`(cat Dockerfile-dev; cat .github/workflow/workflow-ci.yml)|sha1sum |cut -c 1-8`" >> $GITHUB_ENV
      - run: echo "DEV_IMAGE=${IMAGE_FULL_NAME}:dev-${MAIN_PY_VERSION}-${DEV_VERSION}" >> $GITHUB_ENV

      - name: Prepare Docker
        env:
          DOCKERHUB_TOKEN: {% raw %} secrets.DOCKERHUB_TOKEN }}{% endraw %}
        run: |
          cp .env.template .env
          echo "${DOCKERHUB_TOKEN}" | docker login "$REGISTRY" -u "$DOCKER_USERNAME" --password-stdin
          docker buildx create --use --driver=docker-container
          docker --version && docker compose --version

      - name: Pull and spin dev container
        run: |
          docker pull ${DEV_IMAGE}
          docker tag ${DEV_IMAGE} ${PROJECT_NAME}:dev
          docker compose run --user=$(id -u) --rm -d devtools sleep infinity

      - run: echo "PROJECT_VERSION=$(docker compose exec devtools poetry version --short)" >> $GITHUB_ENV

      - name: Login to PyPI
        env:
          PYPI_TOKEN: {% raw %}${{ secrets.PYPI_TOKEN }}{% endraw %}
        run: |
          echo "Login"
          docker compose exec devtools poetry config pypi-token.pypi $PYPI_TOKEN || true

      - name: Check if tag version matches project version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG=${GITHUB_REF:10}
          echo $TAG
          echo $PROJECT_VERSION
          if [[ "$TAG" != "$PROJECT_VERSION" ]]; then exit 1; fi

      - name: Build and publish (dry-run)
        if: github.actor != 'dependabot[bot]'
        run: docker compose exec devtools poetry publish --dry-run

      - name: Build and publish
        if: startsWith(github.ref, 'refs/tags/')
        run: docker compose exec devtools poetry publish

  release-image:
    runs-on: ubuntu-latest
    needs: [ check-code ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: {% raw %}built-package-py${{ env.MAIN_PY_VERSION }}{% endraw %}
          path: dist/

      - run: echo "IMAGE_FULL_NAME=$(echo ${DOCKER_USERNAME}/${PROJECT_NAME})" >> $GITHUB_ENV
      - run: echo "DEV_VERSION=`(cat Dockerfile-dev; cat .github/workflow/workflow-ci.yml)|sha1sum |cut -c 1-8`" >> $GITHUB_ENV
      - run: echo "DEV_IMAGE=${IMAGE_FULL_NAME}:dev-${MAIN_PY_VERSION}-${DEV_VERSION}" >> $GITHUB_ENV
      - run: echo "VERSION=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
      - run: echo "SHORT_VERSION=$(echo ${VERSION%.*})" >> $GITHUB_ENV

      - name: Prepare Docker
        env:
          DOCKERHUB_TOKEN: {% raw %}${{ secrets.DOCKERHUB_TOKEN }}{% endraw %}
        run: |
          cp .env.template .env
          echo "${DOCKERHUB_TOKEN}" | docker login "$REGISTRY" -u "$DOCKER_USERNAME" --password-stdin
          docker buildx create --use --driver=docker-container
          docker --version && docker compose --version

      - name: Pull and spin dev container
        run: |
          docker pull ${DEV_IMAGE}
          docker tag ${DEV_IMAGE} ${PROJECT_NAME}:dev
          docker compose run --user=$(id -u) --rm -d devtools sleep infinity

      - run: echo "PROJECT_VERSION=$(docker compose exec devtools poetry version --short)" >> $GITHUB_ENV

      # https://docs.docker.com/build/cache/backends/gha/
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      - name: Build image
        run: docker buildx build --load --build-arg WHEEL=${PROJECT_NAME}-${PROJECT_VERSION}-py3-none-any.whl -t ${IMAGE_FULL_NAME}:latest . --cache-to type=gha,mode=max --cache-from type=gha

      - name: Add version from git tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag "${IMAGE_FULL_NAME}:latest" "${IMAGE_FULL_NAME}:${VERSION}"
          docker tag "${IMAGE_FULL_NAME}:latest" "${IMAGE_FULL_NAME}:${SHORT_VERSION}"

      - name: Push production images
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/{{ cookiecutter.main_branch }}'
        run: |
          echo "Showing debug information"
          docker image ls
          docker push "${IMAGE_FULL_NAME}" --all-tags
