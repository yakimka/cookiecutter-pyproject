name: CI\CD

on:
  push:
    branches:
      - {{ cookiecutter.main_branch }}
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
  # Update docker hub retention policy
  #schedule:
  #  - cron: "21 7 8 * *"

env:
  PIP_NO_CACHE_DIR: "off"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"

  PROJECT_NAME: "{{ cookiecutter.project_name }}"
  MODULE_NAME: "{{ cookiecutter.module_name }}"
  REGISTRY: "docker.io"
  REGISTRY_USERNAME: "{{ cookiecutter.dockerhub_username }}"
  REGISTRY_TOKEN: {% raw %}${{ secrets.DOCKERHUB_TOKEN }}{% endraw %}
  CACHE_REGISTRY: "ghcr.io"
  CACHE_REGISTRY_USERNAME: "{{ cookiecutter.github_username }}"
  CACHE_REGISTRY_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
  DOCKER_COMPOSE_SERVICE_NAME: "app"
  MAIN_PY_VERSION: "3.12"
  POETRY_DOCKER_IMAGE: "yakimka/poetry:2.0.0-py3.12-slim"

concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}
  cancel-in-progress: true

permissions: read-all

jobs:
  check-code:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13', '3.14']

    steps:
      - uses: actions/checkout@v5

      - run: echo "DEV_IMAGE_FULL_NAME=$(echo ${CACHE_REGISTRY}/${CACHE_REGISTRY_USERNAME}/${PROJECT_NAME})" >> $GITHUB_ENV
      - run: echo "DEV_VERSION=`(cat Dockerfile-dev; cat .github/workflows/workflow-ci.yml)|sha1sum |cut -c 1-8`" >> $GITHUB_ENV
      - run: echo "DEV_IMAGE=${DEV_IMAGE_FULL_NAME}:dev-{% raw %}${{ matrix.python-version }}{% endraw %}-${DEV_VERSION}" >> $GITHUB_ENV
      - run: echo "VERSION=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
      - run: echo "SHORT_VERSION=$(echo ${VERSION%.*})" >> $GITHUB_ENV

      - name: Prepare Docker
        run: |
          cp .env.template .env
          docker login "$CACHE_REGISTRY" -u "$CACHE_REGISTRY_USERNAME" --password="${CACHE_REGISTRY_TOKEN}"
          docker buildx create --use --driver=docker-container
          docker --version && docker compose --version

      - name: Load cached venv and cache
        id: cached-venv-and-cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            .cache
          key: {% raw %}py${{ matrix.python-version }}-${{ hashFiles('./poetry.lock') }}{% endraw %}

      - name: Build docker dev image
        run: |
          docker pull ${DEV_IMAGE} || (
            {% raw %}PYTHON_VERSION=${{ matrix.python-version }} docker compose build ${DOCKER_COMPOSE_SERVICE_NAME} ;{% endraw %}
            docker tag ${PROJECT_NAME}:dev ${DEV_IMAGE} ;
            docker push ${DEV_IMAGE}
          )
          docker tag ${DEV_IMAGE} ${PROJECT_NAME}:dev

      - name: Run checks
        run: docker compose run -e CI=1 --user=$(id -u) --rm devtools ./ci.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.5.1
        with:
          files: ./coverage.xml
          token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
          slug: {{ cookiecutter.github_username }}/{{ cookiecutter.project_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: {% raw %}built-package-py${{ matrix.python-version }}{% endraw %}
          path: dist/

  release-package:
    runs-on: ubuntu-latest
    needs: [ check-code ]

    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          name: {% raw %}built-package-py${{ env.MAIN_PY_VERSION }}{% endraw %}
          path: dist/

      - name: Prepare Docker
        run: |
          docker login "$REGISTRY" -u "$REGISTRY_USERNAME" --password="${REGISTRY_TOKEN}" || true

      - name: Pull and spin dev container
        run: |
          docker run -v $(pwd):/code -w /code --rm -d --name=poetry ${POETRY_DOCKER_IMAGE} sleep infinity

      - run: echo "PROJECT_VERSION=$(docker exec poetry poetry version --short)" >> $GITHUB_ENV

      - name: Login to PyPI
        env:
          PYPI_TOKEN: {% raw %}${{ secrets.PYPI_TOKEN }}{% endraw %}
        run: |
          echo "Login"
          docker exec poetry poetry config pypi-token.pypi $PYPI_TOKEN || true

      - name: Check if tag version matches project version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG=${GITHUB_REF:10}
          echo $TAG
          echo $PROJECT_VERSION
          if [[ "$TAG" != "$PROJECT_VERSION" ]]; then exit 1; fi

      - name: Build and publish (dry-run)
        if: github.actor != 'dependabot[bot]'
        run: docker exec poetry poetry publish --dry-run

      - name: Build and publish
        if: startsWith(github.ref, 'refs/tags/')
        run: docker exec poetry poetry publish

  release-image:
    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
    needs: [ check-code ]

    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          name: {% raw %}built-package-py${{ env.MAIN_PY_VERSION }}{% endraw %}
          path: dist/

      - run: echo "IMAGE_FULL_NAME=$(echo ${REGISTRY}/${REGISTRY_USERNAME}/${PROJECT_NAME})" >> $GITHUB_ENV
      - run: echo "VERSION=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
      - run: echo "SHORT_VERSION=$(echo ${VERSION%.*})" >> $GITHUB_ENV

      - name: Prepare Docker
        run: |
          cp .env.template .env
          docker login "$REGISTRY" -u "$REGISTRY_USERNAME" --password="${REGISTRY_TOKEN}"
          docker buildx create --use --driver=docker-container
          docker --version && docker compose --version

      - name: Pull and spin dev container
        run: |
          docker run -v $(pwd):/code -w /code --rm -d --name=poetry ${POETRY_DOCKER_IMAGE} sleep infinity

      - run: echo "PROJECT_VERSION=$(docker exec poetry poetry version --short)" >> $GITHUB_ENV

      # https://docs.docker.com/build/cache/backends/gha/
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Create tag string
        run: echo "TAG_ARGS=-t ${IMAGE_FULL_NAME}:latest" >> $GITHUB_ENV

      - name: Add version from git tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "TAG_ARGS=${TAGS} -t ${IMAGE_FULL_NAME}:${VERSION} -t ${IMAGE_FULL_NAME}:${SHORT_VERSION}" >> $GITHUB_ENV

      - name: Set push flag
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/{{ cookiecutter.main_branch }}'
        run: echo "PUSH_FLAG=--push" >> $GITHUB_ENV

      - name: Build image
        run: >
          docker buildx build ${PUSH_FLAG:-}
          --build-arg WHEEL=${MODULE_NAME}-${PROJECT_VERSION}-py3-none-any.whl
          --cache-to type=gha,mode=max,scope=$GITHUB_REF_NAME
          --cache-from type=gha,scope=$GITHUB_REF_NAME
          --platform=linux/arm64,linux/amd64
          ${TAG_ARGS} .

  deploy:
    name: Deploy To Production
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    needs: [ release-image ]
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/{{ cookiecutter.main_branch }}'
    steps:
      - name: Update service
        run: |
          sleep 30
          curl {% raw %}${{ secrets.UPDATE_URL }}{% endraw %} || curl {% raw %}${{ secrets.UPDATE_URL }}{% endraw %}
